/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/json/generic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /generic operation on user resource */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Request body for the /generic operation on user resource */
            requestBody?: {
                content: {
                    "application/vnd.api+json": {
                        data: {
                            orders?: {
                                fields?: {
                                    default_value: string;
                                    description?: string | null;
                                    editable: boolean;
                                    fixed: boolean;
                                    mandatory: boolean;
                                    name: string;
                                    shown: boolean;
                                    text?: string | null;
                                    type: string;
                                    value?: string | null;
                                }[] | null;
                                items_embedded?: null | {
                                    fields?: {
                                        default_value: string;
                                        description?: string | null;
                                        editable: boolean;
                                        fixed: boolean;
                                        mandatory: boolean;
                                        name: string;
                                        shown: boolean;
                                        text?: string | null;
                                        type: string;
                                        value?: string | null;
                                    }[] | null;
                                    product_id: number;
                                    quantity?: number | null;
                                }[] | {
                                    fields?: {
                                        default_value: string;
                                        description?: string | null;
                                        editable: boolean;
                                        fixed: boolean;
                                        mandatory: boolean;
                                        name: string;
                                        shown: boolean;
                                        text?: string | null;
                                        type: string;
                                        value?: string | null;
                                    }[] | null;
                                    product_id?: number | null;
                                    quantity?: number | null;
                                }[];
                                items_new_type?: {
                                    fields?: {
                                        default_value: string;
                                        description?: string | null;
                                        editable: boolean;
                                        fixed: boolean;
                                        mandatory: boolean;
                                        name: string;
                                        shown: boolean;
                                        text?: string | null;
                                        type: string;
                                        value?: string | null;
                                    }[] | null;
                                    product_id: number;
                                    quantity?: number | null;
                                }[] | null;
                            }[] | null;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/vnd.api+json": {
                            /** @enum {unknown} */
                            success: true;
                        };
                    };
                };
                default: components["responses"]["errors"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        error: {
            /** @description An application-specific error code, expressed as a string value. */
            code?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description A unique identifier for this particular occurrence of the problem. */
            id?: string;
            links?: components["schemas"]["links"];
            source?: {
                /** @description A string indicating which query parameter caused the error. */
                parameter?: string;
                /** @description A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute]. */
                pointer?: string;
            };
            /** @description The HTTP status code applicable to this problem, expressed as a string value. */
            status?: string;
            /** @description A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization. */
            title?: string;
        };
        errors: components["schemas"]["error"][];
        /** @description A link MUST be represented as either: a string containing the link's URL or a link object. */
        link: string;
        links: {
            [key: string]: components["schemas"]["link"];
        };
        /** @description A "Resource object" representing a user */
        user: {
            /** @description An attributes object for a user */
            attributes?: {
                name?: (string | null) | null;
            };
            id: string;
            /** @description A relationships object for a user */
            relationships?: Record<string, never>;
            type: string;
        };
        /**
         * @description Filters the query to results matching the given filter object
         * @example
         */
        "user-filter": {
            and?: components["schemas"]["user-filter"][];
            id?: components["schemas"]["user-filter-id"];
            name?: components["schemas"]["user-filter-name"];
            not?: components["schemas"]["user-filter"];
            or?: components["schemas"]["user-filter"][];
        };
        "user-filter-id": {
            eq?: number;
            greater_than?: number;
            greater_than_or_equal?: number;
            in?: number[];
            is_nil?: boolean;
            less_than?: number;
            less_than_or_equal?: number;
            not_eq?: number;
        };
        "user-filter-name": {
            contains?: string;
            eq?: string;
            greater_than?: string;
            greater_than_or_equal?: string;
            in?: string[];
            is_nil?: boolean;
            less_than?: string;
            less_than_or_equal?: string;
            not_eq?: string;
        };
    };
    responses: {
        /** @description General Error */
        errors: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/vnd.api+json": components["schemas"]["errors"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
