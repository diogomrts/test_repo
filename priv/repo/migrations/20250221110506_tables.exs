defmodule Helpdesk.Repo.Migrations.Tables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:team_id, :uuid)
      add(:name, :text)
    end

    create table(:teams_campaigns_users, primary_key: false) do
      add(:team_id, :uuid, null: false, primary_key: true)
      add(:campaign_id, :uuid, null: false, primary_key: true)
      add(:user_id, :uuid, null: false, primary_key: true)
      add(:enabled, :boolean)
    end

    create table(:teams_campaigns, primary_key: false) do
      add(:team_id, :uuid, null: false, primary_key: true)
      add(:campaign_id, :uuid, null: false, primary_key: true)
      add(:restricted, :boolean)
    end

    create table(:teams, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:users) do
      modify(
        :team_id,
        references(:teams, column: :id, name: "users_team_id_fkey", type: :uuid, prefix: "public")
      )
    end

    alter table(:teams_campaigns_users) do
      modify(
        :team_id,
        references(:teams,
          column: :id,
          name: "teams_campaigns_users_team_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:teams_campaigns) do
      modify(
        :team_id,
        references(:teams,
          column: :id,
          name: "teams_campaigns_team_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:teams) do
      add(:name, :text)
    end

    create table(:campaigns, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text)
    end

    alter table(:teams_campaigns_users) do
      modify(
        :campaign_id,
        references(:campaigns,
          column: :id,
          name: "teams_campaigns_users_campaign_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :user_id,
        references(:users,
          column: :id,
          name: "teams_campaigns_users_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:teams_campaigns) do
      modify(
        :campaign_id,
        references(:campaigns,
          column: :id,
          name: "teams_campaigns_campaign_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end
  end

  def down do
    drop(constraint(:teams_campaigns, "teams_campaigns_campaign_id_fkey"))

    alter table(:teams_campaigns) do
      modify(:campaign_id, :uuid)
    end

    drop(constraint(:teams_campaigns_users, "teams_campaigns_users_campaign_id_fkey"))

    drop(constraint(:teams_campaigns_users, "teams_campaigns_users_user_id_fkey"))

    alter table(:teams_campaigns_users) do
      modify(:user_id, :uuid)
      modify(:campaign_id, :uuid)
    end

    # drop(table(:campaigns))

    alter table(:teams) do
      remove(:name)
    end

    drop(constraint(:teams_campaigns, "teams_campaigns_team_id_fkey"))

    alter table(:teams_campaigns) do
      modify(:team_id, :uuid)
    end

    drop(constraint(:teams_campaigns_users, "teams_campaigns_users_team_id_fkey"))

    alter table(:teams_campaigns_users) do
      modify(:team_id, :uuid)
    end

    drop(constraint(:users, "users_team_id_fkey"))

    alter table(:users) do
      modify(:team_id, :uuid)
    end

    drop(table(:teams))

    drop(table(:teams_campaigns))

    drop(table(:teams_campaigns_users))

    drop(table(:users))
  end
end
